/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package OnlineBookOrderSystem;

import java.sql.ResultSet;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author tarik
 */
public class ShowStatistics extends javax.swing.JFrame {

    /**
     * Creates new form ShowStatistics
     */
    connect_database con = connect_database.getInstance();

    public ShowStatistics() {

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        barPlot = new javax.swing.JPanel();
        piePlot = new javax.swing.JPanel();
        Jimage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1000, 640));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 0, 0,120));

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("statitstics and figures ");

        jButton1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton1.setText("show plots");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        barPlot.setBackground(new java.awt.Color(0, 0, 0,0));

        javax.swing.GroupLayout barPlotLayout = new javax.swing.GroupLayout(barPlot);
        barPlot.setLayout(barPlotLayout);
        barPlotLayout.setHorizontalGroup(
            barPlotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 378, Short.MAX_VALUE)
        );
        barPlotLayout.setVerticalGroup(
            barPlotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 322, Short.MAX_VALUE)
        );

        piePlot.setBackground(new java.awt.Color(0, 0, 0,0));

        javax.swing.GroupLayout piePlotLayout = new javax.swing.GroupLayout(piePlot);
        piePlot.setLayout(piePlotLayout);
        piePlotLayout.setHorizontalGroup(
            piePlotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 378, Short.MAX_VALUE)
        );
        piePlotLayout.setVerticalGroup(
            piePlotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 322, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(piePlot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(barPlot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(399, 399, 399)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(119, 119, 119))))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {barPlot, piePlot});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(piePlot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(barPlot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jButton2});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {barPlot, piePlot});

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(39, 19, 910, 590));

        Jimage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/2.jpg"))); // NOI18N
        Jimage.setText("jLabel5");
        Jimage.setMaximumSize(new java.awt.Dimension(1000, 1000));
        Jimage.setMinimumSize(new java.awt.Dimension(1000, 640));
        Jimage.setPreferredSize(new java.awt.Dimension(1000, 640));
        getContentPane().add(Jimage, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        new AdminForm().setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //barPlot.removeAll();
        barPlot.removeAll();
        piePlot.removeAll();

        visualizeBarPlot();
        visualizePieChart();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShowStatistics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShowStatistics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShowStatistics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShowStatistics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShowStatistics().setVisible(true);
            }
        });
    }

    private void visualizeBarPlot() {
        try {
            // Clear previous content in the bar plot panel
            barPlot.removeAll();

            DefaultCategoryDataset dataset = new DefaultCategoryDataset();

            // Get book IDs and their respective order counts
            ResultSet rs = con.retrivedata("SELECT id FROM book");
            ArrayList<Integer> data = new ArrayList<>();
            ArrayList<Object[]> booksList = new ArrayList<>();
            int bookID = 0;

            while (rs.next()) {
                try {
                    bookID = rs.getInt(1);
                    Object[] allBooks = {bookID};
                    booksList.add(allBooks);
                } catch (SQLException ex) {
                    Logger.getLogger(ShowStatistics.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            for (Object[] b : booksList) {
                try {
                    bookID = (int) b[0]; // Cast the Object to int
                    ResultSet count = con.retrivedata("SELECT COUNT(*) FROM orders_books WHERE book_id = '" + bookID + "'");
                    if (count.next()) {
                        int countValue = count.getInt(1);
                        data.add(countValue);
                        dataset.addValue(countValue, "Orders", String.valueOf(bookID));
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(ShowStatistics.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            JFreeChart barChart = ChartFactory.createBarChart(
                    "Number of Orders per Book",
                    "Book ID",
                    "Number of Orders",
                    dataset,
                    PlotOrientation.VERTICAL,
                    true, true, false);

            // Create a buffered image to draw the chart
            BufferedImage bufferedImage = barChart.createBufferedImage(barPlot.getWidth(), barPlot.getHeight());

            // Draw the buffered image onto the panel
            Graphics2D g2d = (Graphics2D) barPlot.getGraphics();
            g2d.drawImage(bufferedImage, 0, 0, null);

            // Dispose of the graphics context
            g2d.dispose();

        } catch (SQLException ex) {
            Logger.getLogger(ShowStatistics.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void visualizePieChart() {
        piePlot.removeAll();
        try {
            DefaultPieDataset dataset = new DefaultPieDataset();

            // Get book IDs and their respective order counts
            ResultSet rs = con.retrivedata("SELECT id , name FROM category");
            ArrayList<Integer> categoriesIDS = new ArrayList<>();
            ArrayList<String> categoriesNames = new ArrayList<>();
            while (rs.next()) {
                int categoryID = rs.getInt(1);
                String categoryName = rs.getString(2);
                categoriesIDS.add(categoryID);
                categoriesNames.add(categoryName);
            }

            for (int i = 0; i < categoriesIDS.size(); i++) {
                int categoryID = categoriesIDS.get(i);
                String categoryName = categoriesNames.get(i);

                ResultSet count = con.retrivedata("SELECT COUNT(*) FROM book WHERE book_category = '" + categoryID + "'");

                if (count.next()) {
                    int countValue = count.getInt(1);
                    dataset.setValue(categoryName, countValue);
                }
            }

            // Create a pie chart
            JFreeChart pieChart = ChartFactory.createPieChart("books per category", dataset, true, true, false);
            
            BufferedImage bufferedImage = new BufferedImage(piePlot.getWidth(), piePlot.getHeight(), BufferedImage.TYPE_INT_ARGB);
            Graphics2D g2d = bufferedImage.createGraphics();

            // Draw the chart onto the buffered image
            pieChart.draw(g2d, new Rectangle2D.Double(0, 0, piePlot.getWidth(), piePlot.getHeight()), null, null);

            // Draw the buffered image onto the panel
            piePlot.getGraphics().drawImage(bufferedImage, 0, 0, null);

            // Dispose of the graphics context
            g2d.dispose();

        } catch (SQLException ex) {
            Logger.getLogger(ShowStatistics.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

// get the maximum value in the data array
    private double getMaxValue(int[] data) {
        int max = Integer.MIN_VALUE;
        for (int value : data) {
            if (value > max) {
                max = value;

            }
        }
        return max;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Jimage;
    private javax.swing.JPanel barPlot;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel piePlot;
    // End of variables declaration//GEN-END:variables

}
